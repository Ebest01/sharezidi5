const express = require('express');
const { MongoClient } = require('mongodb');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json({ limit: "50mb" }));
app.use(express.urlencoded({ extended: false, limit: "50mb" }));

// CORRECT MongoDB connection using EasyPanel credentials
const mongoUrl = 'mongodb://szmdb_user:1!!!!!...Magics4321@sharezidi_v2_sharezidi_mdb:27017/?tls=false';

// Alternative with URL encoding for special characters (recommended)
const username = 'szmdb_user';
const password = '1!!!!!...Magics4321'; // Replace ... with actual characters
const encodedPassword = encodeURIComponent(password);
const mongoUrlEncoded = `mongodb://${username}:${encodedPassword}@sharezidi_v2_sharezidi_mdb:27017/?tls=false`;

let db;

// Connect to MongoDB
async function connectToMongo() {
  try {
    console.log('[MONGO] Connecting...');
    const client = new MongoClient(mongoUrlEncoded, {
      useUnifiedTopology: true
    });
    
    await client.connect();
    
    // Since no database is specified in EasyPanel URL, use a default name
    db = client.db('sharezidi'); // You can name this whatever you want
    
    console.log('✅ [MONGO] Connected successfully');
    console.log('✅ [MONGO] Using database: sharezidi');
    
    // Test the connection by listing collections
    const collections = await db.listCollections().toArray();
    console.log(`[MONGO] Collections found: ${collections.length}`);
    
  } catch (err) {
    console.error('❌ [MONGO] Connection failed:', err.message);
  }
}

// Connect on startup
connectToMongo();

// Registration endpoint
app.post("/api/register", async (req, res) => {
  try {
    if (!db) {
      return res.status(500).json({ error: 'Database not connected' });
    }

    const { email } = req.body;
    
    if (!email) {
      return res.status(400).json({ error: 'Email is required' });
    }

    const users = db.collection('users');
    
    // Check if user exists
    const existingUser = await users.findOne({ email });
    if (existingUser) {
      return res.status(409).json({ error: 'Email already exists' });
    }

    // Generate password
    const password = Math.random().toString(36).slice(-8);
    
    // Insert user
    const result = await users.insertOne({
      email,
      password,
      createdAt: new Date(),
      isActive: true
    });

    console.log(`[REGISTER] New user created: ${email}`);

    res.status(201).json({
      message: 'User registered successfully',
      user: {
        id: result.insertedId,
        email,
        password,
        createdAt: new Date()
      }
    });

  } catch (err) {
    console.error('[REGISTER] Error:', err);
    res.status(500).json({ error: 'Failed to register user' });
  }
});

// Login endpoint  
app.post("/api/login", async (req, res) => {
  try {
    if (!db) {
      return res.status(500).json({ error: 'Database not connected' });
    }

    const { email, password } = req.body;
    
    const users = db.collection('users');
    const user = await users.findOne({ email, password });
    
    if (!user) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }
    
    // Update last login
    await users.updateOne(
      { _id: user._id },
      { $set: { lastLogin: new Date() } }
    );
    
    console.log(`[LOGIN] User logged in: ${email}`);
    
    res.json({
      message: 'Login successful',
      user: {
        id: user._id,
        email: user.email,
        lastLogin: new Date()
      }
    });

  } catch (err) {
    console.error('[LOGIN] Error:', err);
    res.status(500).json({ error: 'Login failed' });
  }
});

// Get all users
app.get("/api/users", async (req, res) => {
  try {
    if (!db) {
      return res.status(500).json({ error: 'Database not connected' });
    }

    const users = db.collection('users');
    const allUsers = await users.find({}).toArray();
    
    console.log(`[USERS] Found ${allUsers.length} users`);
    res.json(allUsers);
    
  } catch (err) {
    console.error('[USERS] Error:', err);
    res.status(500).json({ error: 'Failed to fetch users' });
  }
});

// Health check
app.get('/api/health', (req, res) => {
  if (db) {
    res.json({ 
      status: 'healthy', 
      database: 'connected',
      timestamp: new Date()
    });
  } else {
    res.status(500).json({ 
      status: 'unhealthy', 
      database: 'disconnected',
      timestamp: new Date()
    });
  }
});

// Serve static files (for production)
const path = require('path');
app.use(express.static(path.join(__dirname, 'build')));

app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'build', 'index.html'));
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`🚀 [SERVER] ShareZidi running on port ${PORT}`);
  console.log(`🔗 [SERVER] Health check: http://localhost:${PORT}/api/health`);
});